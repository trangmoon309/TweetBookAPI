
DI là khi ta sử dụng một object của một class trong class khác nó. Và trong class khác dùng object đó để gọi đến các phương thức rồi sử dụng công dụng
của chúng. "A dependency is an object that another object depends on"; "Injection of the service into the constructor of the class where it's used: inject
service vào hàm tạo" 

services.GetRequiredService<IMyDependency>(); dùng để gọi đến service mà k cần inject ở ctor

1/ Combine service collection:
- Giúp chúng ta đăng ký service bind với configuration options
services.Configure<PositionOptions>(
        Configuration.GetSection(PositionOptions.Position));

    services.Configure<ColorOptions>(
        Configuration.GetSection(ColorOptions.Color));


2/ Bind configuration Data using the options:
 "Position": {
    "Title": "Editor",
    "Name": "Joe Smith"
  }

  public class PositionOptions
{
    public const string Position = "Position";

    public string Title { get; set; }
    public string Name { get; set; }
}


var positionOptions = new PositionOptions();
        Configuration.GetSection(PositionOptions.Position).Bind(positionOptions);


3/ JWT(Json Web Token):
- Phần header sẽ chứa kiểu dữ liệu , và thuật toán sử dụng để mã hóa ra chuỗi JWT
- Phần payload sẽ chứa các thông tin mình muốn đặt trong chuỗi 
- Phần chữ ký này sẽ được tạo ra bằng cách mã hóa phần header , payload kèm theo một chuỗi secret (khóa bí mật)
- Khi bạn gửi request đến server thì luôn phải đi kèm với token để xác thực và phân quyền, xem bạn có quyền để truy cập vào api đó hay không.
- Những API có bảo mật thì mới cần token để xác thực
- Token Authentication:
    + Khi đăng nhập thành công, hệ thống trả về token, token được lưu ở client(local storage, session storage, cookie). Mỗi request(lời gọi API) sau đó sẽ đc 
    gắn vào phần header của HTTP 
    + Server kiểm tra token có hợp lệ không và trả lại kết quả cho người dùng.

- Điểm mạnh của Token Authentication:
    + Dễ maintain, mở rộng (vì server k lưu trữ), cách cũ thì ta phải lưu session ở server..
    + Bảo mật
    + Ủy quyền: đăng nhập = face/gg
    + Đa nền tảng: web, mobile, IOT

- JWT là một chuỗi gồm 3 phần, mỗi phần cách nhau bởi dấu chấm (header.payload.signature)

- Có 3 phương pháp xác thực phổ biến:
    + Basic Auth (username và password đc lưu ở DB, server sẽ check thông tin ở DB nếu phù hợp thì trả lại trang)
    + Session Auth (hay còn gọi là Cookie Auth) : khi người dùng đăng nhập thành công thì sẽ tạo ra session người dùng ở server, session sẽ chứa thông
    tin của người dùng đang đăng nhập và sau đó trả lại sessionID để truy cập session cho những request sau. Dữ liệu của session đc lưu ở DB, còn sessionID
    được lưu ở cookie hoặc URL trang web.
    + Token Auth: một chuỗi ký tự (thường được mã hóa) mang thông tin xác định người dùng được server tạo ra và lưu ở client. Server sau đó có thể không 
    lưu lại token này.


- Bearer Scheme là cách thức dùng để truyền token vào trong HTTP Request
    + Ví dụ như: Authorization: Bearer cn389ncoiwuencr
    + Template: Authorization: <type> <credentials:token>


4/ User specific content with JWT claims:
- Cách chúng ta có thể sử dụng một userID để tạo một Post dành cho 1 user nhất định, được xem bởi các user nhất định
- Ví dụ như userA create bài post A thì chỉ userA mới được delete, update nos
- Bước 1: Tạo extension GeneralExtention dùng để lấy userID từ token, thêm 2 thuộc tính mới vào Post.Domain
- Bước 2: thêm các đoạn code vào trong PostController(create,update,..)


5/ Testing: Có 2 loại kiểm thử: kiểm thử đơn vị(unit test) và kiểm thử tích hợp(integration test)
- Học về intergration Test
- Bước 1: Add new project (unit test)
- Bước 2: Cài các package cần thiết: asp.net core.testing, asp.net core.app


6/ Domain(DTO) to Contract(response/request) mapping with Automapper:
- package: AutoMapper, autommaper dj
- CreateMap<Source,Destination>();
- CreateMap<Source,Destination>().ForMemer(x => x.member, opt => opt.MapFrom(src => src.Tags.Select(x => x.srcMemer)));

7/ Validating REQUESTS with FluentValidation
- Validation is a process to validate and check the data inserted by the user in the view. ASP.NET MVC provides various 
mechanisms for the validation like Remote Validation, Validation using Data Annotations, Fluent Validation and Custom 
Validation.
- Use Fluent Validation when you want to create some advanced and complex validation for the user data.

- Vi du khi ta tạo một post/tag, trước khi tạo 1 object mới, t phải kiểm tra phần request FromBody có null hay không
    như: 
        if(string.IsNullOrEmpty(request.TagName)) return BadRequest(new {error = "empty name"});
    và công việc kiểm tra này được lặp lại ở nhiều method khác nhau, vì vậy để tiết kiệm thời gian
    ta đẽ dùng validating request.

- FluentValidation: package(FluentValidation), tạo folder Validator
    Sau đó dùng ModelState để kiểm tra trạng thái của request bằng cơ chế fluentValidation

- Tạo folder Validator để tạo class validate, class phải kế thừa AbstractValidator
- đăng kí DI: (Addmvc).AddFluentValidation(mvcConfig => mvcConfig.RegisterValidatorsFromAssemblyContaining<Startup>())

7.2/ Filter trong ASP.Net Core:
- class phải kế thừa IAsyncActionFilter
- Filter Pipeline: 
    + Được chạy sau khi ASP.Net Core chọn action để thực thi
    + https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-3.1
- Tạo folder Filters, class Response.ErrorModel và ErrorResponse


- Trước khi vào controller, mvc sẽ kiểm tra modelstate trước là có valid hay không, khi đó sẽ  chạy hàm CreateTagRequestValidator
(class kế thừa AbstractValidator<class muốn validate>) để kiểm tra xem model có valid không. Sau khi kiểm tra xong sẽ
chạy hàm ValidationFilter : IAsyncActionFilter để tổng hợp các lỗi(nếu có) và ta sẽ thêm các lỗi đó vào ErrorResponse
=> Từ đó, lỗi !modelstate.isvalid sẽ được tự động xử lì mà k cần chúng ta phải thêm các dòng lệnh kiểm tra
vào đầu mỗi controller nữa.


8/

  <PropertyGroup>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>  - allow us to generate this XMLfile will loaded in our DI to describe our API
    <NoWarn>$(NoWarn);1591</NoWarn>
  </PropertyGroup>

  package: swashbuckle.aspnetcore.filters
  - Tạo folder example và các class example cho request và response
  - cài đặt DI 
              services.AddSwaggerExamplesFromAssemblyOf<Startup>();
              và   options.ExampleFilters();


9/ API SDK:
- Tạo project (Class Library .Net Core)
- Tạo các IIdentityAPI và ITweetbookAPI, 
- sau đó tải package Refit, (an interface automatically creates its own implementation)

10/ Setting up ApiKey-based Authentication:
- We will use static key across the whole API (static key có thể sử dụng tất cả api) hoặc tích hợp(integrate) service khác với
your API
- Bước 1: Thêm class ApiKeyAuthAttribute vào folder Filters


11/ Response caching using Redis (Lưu trữ các response tại bộ nhớ tạm dùng Redis: redis là csdl trong bộ nhớ, mã nguồn mở)
- Redis: cache server, Chính tốc độ đọc ghi nhanh mà Redis có thể làm bộ nhớ đệm, nơi chia sẻ dữ liệu giữa các ứng dụng hoặc 
làm database tạm thời. Lưu key-value trên bộ nhớ RAM
- Redis là một sự lựa chọn tuyệt vời khi ta cần đến một server lưu trữ dữ liệu đòi hỏi tính mở rộng cao (scaleable) và chia sẻ
bởi nhiều tiến trình, nhiều ứng dụng và nhiều server khác nhau.
- Tạo Cache Service trong folder service
- Tạo Cache Installer
- Tạo Cache Folder
- Tạo CacheAttribute (Cache) và test việc dùng nó trong PostController(GetAll, GetOne)

- Giả sử mỗi giây bạn nhận được 100 request, mỗi request sẽ mất 1s để chờ database query xử lý. Database sẽ dễ bị quá tải, 
người dùng thì chờ mòn râu.

- Sử dụng caching để cache kết quả query vào RAM, lúc này thời gian tuy xuất chỉ còn tầm 50-100ms, lại không phải cần truy cập 
database. Hệ thống được giảm tải, còn người dùng lại nhận được kết quả nhanh hơn rất nhiều nhiều.
- Chỉ cần dùng HashMap dạng Key-Value là bạn đã có thể implement caching một cách đơn giản rồi.


12/ Implementing pagination:
- Khi chúng ta không muốn return everything trong 1 response khi mà response có nhiều items, lúc đó response sẽ chứa rất nhiều dữ liệu, có thể chứa đến
hàng trăm items (nếu getall,..) dễ dẫn đến việc mất dữ liệu => Thay vì return everything in a single response, chúng ta sẽ return ở các pages.
- Tạo class Response trong Response folder sau đó chỉnh sửa lại giá trị return của GetAll
- Tạo class PagedResponse trong Response folder sau đó chỉnh sửa lại giá trị return của GetAll
- Tạo folder Queries trong Request => tạo PaginationQuery => thêm [FromQuery] vào tham số của GetAll
- Tạo class PaginationFilter trong folder Domain
- Tạo class ở MappingProfile

13/ Health-check:
- Tạo HealthChecksInstaller
- Đăng kí middelware
- Tạo folder HealthChecks ở project Contract


14/ 
[FromQuery] - Gets values from the query string. ví dụ: me?firstname=trang&lastname=huynh thì values là trang và huỳnh
[FromRoute] - Gets values from route data; ví dụ: post/{id=123}/{name=post1} => post/123/post1 thì route data chính là id và name
[FromForm] - Gets values from posted form fields.
[FromBody] - Gets values from the request body.
[FromHeader] - Gets values from HTTP headers.
https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-3.1
- FromBody: lấy các thuộc tính từ HTTP Request, dùng cho những kiểu dữ liệu đơn giản, nếu là các kiểu dữ liệu do người
dùng tạo ra thì nó sẽ bị ignored
- 